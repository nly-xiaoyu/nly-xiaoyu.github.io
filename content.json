{"meta":{"title":"Hexo","subtitle":"","description":"","author":"xiaoyu","url":"https://nly-xiaoyu.github.io.git","root":"/"},"pages":[{"title":"关于","date":"2021-03-10T02:39:10.348Z","updated":"2021-03-10T02:39:10.348Z","comments":false,"path":"about/index.html","permalink":"https://nly-xiaoyu.github.io.git/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"404 Not Found：该页无法显示","date":"2021-07-13T02:41:36.973Z","updated":"2021-03-10T02:39:10.348Z","comments":false,"path":"/404.html","permalink":"https://nly-xiaoyu.github.io.git/404.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-03-10T03:01:25.181Z","updated":"2021-03-10T02:39:10.348Z","comments":false,"path":"repository/index.html","permalink":"https://nly-xiaoyu.github.io.git/repository/index.html","excerpt":"","text":""},{"title":"书单","date":"2021-03-10T02:39:10.348Z","updated":"2021-03-10T02:39:10.348Z","comments":false,"path":"books/index.html","permalink":"https://nly-xiaoyu.github.io.git/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-07-16T03:04:18.804Z","updated":"2021-07-16T03:04:18.804Z","comments":false,"path":"links/index.html","permalink":"https://nly-xiaoyu.github.io.git/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-03-10T02:39:10.348Z","updated":"2021-03-10T02:39:10.348Z","comments":false,"path":"categories/index.html","permalink":"https://nly-xiaoyu.github.io.git/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-03-10T03:35:33.277Z","updated":"2021-03-10T02:39:10.348Z","comments":false,"path":"tags/index.html","permalink":"https://nly-xiaoyu.github.io.git/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"线程学习笔记","slug":"node/Thread","date":"2021-11-23T07:23:08.704Z","updated":"2021-11-24T09:06:04.979Z","comments":true,"path":"2021/11/23/node/Thread/","link":"","permalink":"https://nly-xiaoyu.github.io.git/2021/11/23/node/Thread/","excerpt":"","text":"线程callable接口callable接口拥有返回值,需要抛出异常,需要手动开启服务和关闭服务 实现:线程体中实现callable接口,重写call方法（与runable中的run方法一致） 12345678//创建执行服务ExecutorService ser = Exacutor.newFixedThreadPool(int nTread);//提交执行Future &lt;Object&gt; result = ser.submit;//和runable的start方法一致,具有其他操作//获取结果Object result.get();//需要抛出异常//关闭服务ser.shutdown(); lambda表达式简化代码程序，属于函数式编程。 避免匿名内部类定义过多 可以让代码看起来更加简洁 去掉了一堆没有意义的代码，保留核心逻辑 函数式接口如果一个接口只包含唯一的抽象一个方法，那么它就是函数式接口。 线程方法 setPriority（更改线程的优先级） static void sleep（在指定毫秒数内让当前正在执行的线程休眠） void join（等待线程中止） static void yield（站厅正在执行的线程，并执行其他线程） void interrupt（中断线程，建议不适用） boolean isAlive（测试线程是否出于活动状态） 线程停止不推荐使用JDK提供的stop()，destroy()方法，推荐使用一个标志位flag，当flag=false时，程序自己停止。 线程休眠sleep（）指定当前线程阻塞时间的毫秒数。 sleep能模拟网络延时，放大高网络延时的问题发生性。 sleep不会释放线程锁。 线程礼让yeild 让当前正在执行的线程暂停，但不阻塞，由运行态转化成阻塞态，礼让不一定成功。 线程强制执行join 待该线程执行完后，其他线程才能执行，否则进入阻塞态。","categories":[{"name":"Thread","slug":"Thread","permalink":"https://nly-xiaoyu.github.io.git/categories/Thread/"}],"tags":[{"name":"node","slug":"node","permalink":"https://nly-xiaoyu.github.io.git/tags/node/"}]},{"title":"JVM学习笔记","slug":"node/JVMnode","date":"2021-11-02T08:11:34.000Z","updated":"2021-11-03T10:00:58.013Z","comments":true,"path":"2021/11/02/node/JVMnode/","link":"","permalink":"https://nly-xiaoyu.github.io.git/2021/11/02/node/JVMnode/","excerpt":"","text":"[TOC] JVM 基本概念JVMJVM是可运行Java代码的假想计算机，包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收，堆和一个存储方法域。JVM是运行在操作系统之上的，它与硬件没有直接的交互。 运行过程1234 Java源文件通过编译器编译，产生相应的字节码文件(.Class文件)，然后字节码文件通通Java虚拟机的解释器，翻译成待定机器上的字节码。如下·Java源文件→编译器→字节码文件·字节码文件→JVM→机器码 为什么能跨平台12每一种跨平台的的解释器是不同的 但是实现的虚拟机是相同的，这也是Java能实现跨平台的原因。当一个程序开始运行,这是虚拟机开始实例化了，多个程序启动就会存在多个虚拟机实例。当程序退出或者关闭,虚拟机实例消亡多个虚拟机实例之间的数据不会共享。 线程什么是线程12这里的线程指的是程序执行的一个实体。JVM允许一个应用并发执行多个线程。 JVM内存区域1JVM内存主要分为线程私有区域【程序计数器，虚拟机栈，本地方法区】、线程共享区域【JAVA堆、方法区】、直接内存。 程序计数器12当前线程所执行的字节码的行号提示器，每个线程都有一个独立的线程的计数器。 在执行java方法时，计数器记录的时虚拟机字节码指令的地址（当前指令的地址）。 虚拟机栈12虚拟机额栈是用来描述java方法执行的内存模型，每个方法在执行的时候会创建一个栈帧用来存储局部变量、操作数栈、动态链接、方法出口等信息。每个方法从调用到执行完成，对应一个栈帧在虚拟机中入栈到出栈。 堆-运行时数据区1被线程共享的内存区域，创建的对象和数组都保存在java堆中，也是GC（垃圾回收器）进行垃圾回收的最重要的内存区域。 方法区123用于存储被JVM加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池。 JVM运行时内存Java 堆从 GC 的角度还可以细分为: 新生代(Eden区、From Survivor区和To Survivor区)和老年代。 新生代123456789是用来存放新生的对象.一般占据堆的 1&#x2F;3 空间。由于频繁创建对象，所以新生代会频繁触发MinorGC进行垃圾回收。新生代又分为Eden区、ServivorFrom、ServivorTo三个区。Eden区Java新对象的出生地如果新创建的对象占用内存很大，则直接分配到老年代）。当 Eden区内存不够的时候就会触MinorGC，对新生代区进行一次垃圾回收。ServivorFrom上一次GC的幸存者作为这一次GC的被扫描者。3)ServivorTo保留了一次MinorGC过程中的幸存者。4)MinorGC的过程首先，把Eden和ServivorFrom区域中存活的对象复制到ServicorTo区域（如果有对象的年龄以及达到了老年的标准，则赋值到老年代区），同时把这些对象的年龄+1（如果ServicorTo不够位置了就放到老年区),然后，清空Eden和ServicorFrom 中的对象,最后，ServicorTo和SrvicorFrom互换，原ServicorTo成为下一次GC时 ServicorFrom区。 老年代12主要存放应用程序中生命周期长的内存对象。老年代的对象比较稳定，所以 MajorGC不会频繁执行。MajorGC采用标记清除算法:首先扫描一次所有老年代，标记出存活的对象，然后回收没有标记的对象。 永久代12指内存的永久保存区域，主要存放Class和Meta（元数据）的信息,Class 在被加载的时候被放入永久区域，它和和存放实例的区域不同,GC不会在主程序运行期对永久区域进行清理。所以这也导致了永久代的区域会随着加载的 Class 的增多而胀满，最终抛出OOM(OutOfMemory)异常。在 Java8 中，永久代已经被移除。被一个称为“元数据区”（元空间）的区域所取代。 垃圾回收算法分代收集算法分代收集法是目前大部分 JVM 所采用的方法，其核心思想是根据对象存活的不同生命周期将内存划分为不同的域，将G 堆划分为老生代和新生代。老生代的特点是每次垃圾回收时只有少量对象需要被回收，新生代的特点是每次垃圾回收时都有大量垃圾需要被回收，根据不同区域选择不同的算法。 123新生代与复制算法新生代中每次垃圾回收都要回收大部分对象，要复制的操作比较少，但通常并不是按照 1：1 来划分新生代。一般将新生代划分为一块较大的Eden空间和两个较小的Survivor空间(From Space, To Space)，每次使用Eden空间和其中的一块Survivor空间，当进行回收时，将该两块空间中还存活的对象复制到另 一块Survivor空间中。 123456789101112老年代与标记复制算法1. JAVA 虚拟机提到过的处于方法区的永生代(Permanet Generation)，它用来存储 class 类，常量，方法描述等。对永生代的回收主要包括废弃常量和无用的类。2. 对象的内存分配主要在新生代的 Eden Space 和 Survivor Space 的 From Space(Survivor 目前存放对象的那一块)，少数情况会直接分配到老生代。3. 当新生代的 Eden Space 和 From Space 空间不足时就会发生一次 GC，进行 GC 后，EdenSpace 和 From Space 区的存活对象会被挪到 To Space，然后将 Eden Space 和 FromSpace 进行清理。4. 如果 To Space 无法足够存储某个对象，则将这个对象存储到老生代。5. 在进行 GC 后，使用的便是 Eden Space 和 To Space 了，如此反复循环。6. 当对象在 Survivor 区躲过一次 GC 后，其年龄就会+1。默认情况下年龄到达 15 的对象会被移到老生代中。","categories":[{"name":"JVM","slug":"JVM","permalink":"https://nly-xiaoyu.github.io.git/categories/JVM/"}],"tags":[{"name":"node","slug":"node","permalink":"https://nly-xiaoyu.github.io.git/tags/node/"}]},{"title":"Redis学习笔记","slug":"node/Redislearn","date":"2021-10-28T03:16:44.914Z","updated":"2021-11-02T07:49:32.178Z","comments":true,"path":"2021/10/28/node/Redislearn/","link":"","permalink":"https://nly-xiaoyu.github.io.git/2021/10/28/node/Redislearn/","excerpt":"","text":"NoSql数据库简介技术分类1231 解决功能性问题:Java,Jsp,Tomcat,HTML,JDBC2 解决扩展问题:Struts,Spring,SpingMVC,Mybatis3 解决性能问题 : NoSql,Java线程,Hadoop","categories":[{"name":"Redis","slug":"Redis","permalink":"https://nly-xiaoyu.github.io.git/categories/Redis/"}],"tags":[{"name":"node","slug":"node","permalink":"https://nly-xiaoyu.github.io.git/tags/node/"}]},{"title":"library项目部署","slug":"libraryProject/librarywebsite","date":"2021-10-24T10:11:31.445Z","updated":"2022-01-23T05:24:15.371Z","comments":true,"path":"2021/10/24/libraryProject/librarywebsite/","link":"","permalink":"https://nly-xiaoyu.github.io.git/2021/10/24/libraryProject/librarywebsite/","excerpt":"","text":"服务器初始化安装mysql123456789101112131415161718192021222324252627282930由于centOS7中默认安装了MariaDB,需要先进行卸载rpm -qa | grep -i mariadb找到MariaDB后删除rpm -e --nodeps (mariadb-libs-5.5.64-1.el7.x86_64)删除之前安装的Mysqlrpm -qa | grep mysql找到mysql后删除rpm -e --nodeps下载官方 Mysql 包wget -i -c http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-10.noarch.rpm解压安装yum -y install mysql57-community-release-el7-10.noarch.rpm安装mysqlyum -y install mysql-community-server启动mysqlsystemctl start mysqld.service查看mysql状态service mysqld status查看初始密码grep &#39;password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log进入mysqlmysql -u root -p修改密码set global validate_password_policy&#x3D;LOW;set global validate_password_length&#x3D;4;ALTER USER USER() IDENTIFIED BY &#39;root&#39;;设置远程连接(前提：关闭防火墙或开放3306端口)use mysql;update user set host &#x3D; &#39;%&#39; where user &#x3D; &#39;root&#39;;flush privileges; 中途遇到的问题12345678910111213141516Error: Unable to find a match: mysql-community-server如何解决先执行：yum module disable mysql再执行：yum -y install mysql-community-serverError: GPG check FAILED解决修改yum的配置文件：&#x2F;etc&#x2F;yum.confvi &#x2F;etc&#x2F;yum.conf将 gpgcheck 修改为0rpm --import &#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-centosofficial将 gpgcheck 修改为1 mysql远程授权1234567mysql&gt; use mysql;mysql&gt; update user set host&#x3D;&quot;%&quot; where user&#x3D;&quot;root&quot;;mysql&gt; flush privileges;开放3306端口 打jar包上传12mvn cleanmvn package 在linux上运行 library-start.sh文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#!&#x2F;bin&#x2F;bashCUR_SHELL_DIR&#x3D;&#96;pwd&#96;CUR_SHELL_NAME&#x3D;&#96;basename $&#123;BASH_SOURCE&#125;&#96;#修改这里jar包名即可JAR_NAME&#x3D;&quot;library-1.0-SNAPSHOT.jar&quot;JAR_PATH&#x3D;$CUR_SHELL_DIR&#x2F;$JAR_NAME#JAVA_MEM_OPTS&#x3D;&quot; -server -Xms1024m -Xmx1024m -XX:PermSize&#x3D;128m&quot;JAVA_MEM_OPTS&#x3D;&quot;&quot;#SPRING_PROFILES_ACTIV&#x3D;&quot;-Dspring.profiles.active&#x3D;eureka2&quot;SPRING_PROFILES_ACTIV&#x3D;&quot;&quot;LOG_DIR&#x3D;$CUR_SHELL_DIR&#x2F;logsLOG_PATH&#x3D;$LOG_DIR&#x2F;$&#123;JAR_NAME&#125;.logecho_help()&#123; echo -e &quot;syntax: sh $CUR_SHELL_NAME start|stop&quot;&#125;if [ -z $1 ];then echo_help exit 1fiif [ ! -d &quot;$LOG_DIR&quot; ];then mkdir &quot;$LOG_DIR&quot;fiif [ ! -f &quot;$LOG_PATH&quot; ];then touch &quot;$LOG_DIR&quot;fiif [ &quot;$1&quot; &#x3D;&#x3D; &quot;start&quot; ];then# check server PIDS&#x3D;&#96;ps --no-heading -C java -f --width 1000 | grep $JAR_NAME | awk &#39;&#123;print $2&#125;&#39;&#96; if [ -n &quot;$PIDS&quot; ]; then echo -e &quot;ERROR: The $JAR_NAME already started and the PID is $&#123;PIDS&#125;.&quot; exit 1 fiecho &quot;Starting the $JAR_NAME...&quot; # start nohup java $JAVA_MEM_OPTS -jar $SPRING_PROFILES_ACTIV $JAR_PATH &gt;&gt; $LOG_PATH 2&gt;&amp;1 &amp; COUNT&#x3D;0 while [ $COUNT -lt 1 ]; do sleep 1 COUNT&#x3D;&#96;ps --no-heading -C java -f --width 1000 | grep &quot;$JAR_NAME&quot; | awk &#39;&#123;print $2&#125;&#39; | wc -l&#96; if [ $COUNT -gt 0 ]; then break fi done PIDS&#x3D;&#96;ps --no-heading -C java -f --width 1000 | grep &quot;$JAR_NAME&quot; | awk &#39;&#123;print $2&#125;&#39;&#96; echo &quot;$&#123;JAR_NAME&#125; Started and the PID is $&#123;PIDS&#125;.&quot; echo &quot;You can check the log file in $&#123;LOG_PATH&#125; for details.&quot;elif [ &quot;$1&quot; &#x3D;&#x3D; &quot;stop&quot; ];then PIDS&#x3D;&#96;ps --no-heading -C java -f --width 1000 | grep $JAR_NAME | awk &#39;&#123;print $2&#125;&#39;&#96; if [ -z &quot;$PIDS&quot; ]; then echo &quot;ERROR:The $JAR_NAME does not started!&quot; exit 1 fiecho -e &quot;Stopping the $JAR_NAME...&quot; for PID in $PIDS; do kill $PID &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 done COUNT&#x3D;0 while [ $COUNT -lt 1 ]; do sleep 1 COUNT&#x3D;1 for PID in $PIDS ; do PID_EXIST&#x3D;&#96;ps --no-heading -p $PID&#96; if [ -n &quot;$PID_EXIST&quot; ]; then COUNT&#x3D;0 break fi done done echo -e &quot;$&#123;JAR_NAME&#125; Stopped and the PID is $&#123;PIDS&#125;.&quot;else echo_help exit 1fi 运行123chmod 777 library-start.shlibrary-start.sh start开放服务器8888端口","categories":[{"name":"建站","slug":"建站","permalink":"https://nly-xiaoyu.github.io.git/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"建站","slug":"建站","permalink":"https://nly-xiaoyu.github.io.git/tags/%E5%BB%BA%E7%AB%99/"},{"name":"linux","slug":"linux","permalink":"https://nly-xiaoyu.github.io.git/tags/linux/"}]},{"title":"library设计","slug":"libraryProject/librarydesign","date":"2021-09-27T06:09:25.533Z","updated":"2021-11-02T06:55:13.000Z","comments":true,"path":"2021/09/27/libraryProject/librarydesign/","link":"","permalink":"https://nly-xiaoyu.github.io.git/2021/09/27/libraryProject/librarydesign/","excerpt":"","text":"表单设计用户表1234567用于用户登录以及权限分配用户编号 id 自增长用户名 username 唯一 不为空用户密码 password 不为空学号 唯一 默认空电话 不为空权限编号 唯一 不为空 权限表 permit123权限编号 id自增长权限名称 prename 菜单表 menu12345678910111213141516菜单编号 id菜单名称 mname父节点编号 mid修改:(为了适应前端获取数据的格式,对数据库进行修改)菜单编号 id父节点编号 pid菜单名称 title图标位置 icon网页位置 href跳转模式 _target是否默认展子菜单 spread权限标识 permission类型 type状态 status排序值 satus假删除 ifdelete 权限-菜单12权限编号 pid菜单编号 mid 书12345678书编号 id书名 bname书名编号 bno作者名 author价格 price位置编号 locnum位置区域 locarea评论 ramark 借书 appointment123456编号 id用户编号 uid书编号 bid借书时间 borrow还书时间 return书本状态 status 消息 123456id发送者 formid接受者 toid消息 message时间 time状态 status 功能设计注册 123表现层:验证用户填写信息是否合法控制层:1查询用户时候存在 2对密码进行明文加密(util工具) 3注册用户 服务层:1根据用户名查询用户是否存在2根据user对象插入数据库 登录123表现层:验证用户填写信息是否合法控制层:1查询用户时候存在 2对密码进行明文加密(util工具) 3查询用户密码是否正确 4将该用户绑定到session中 5返回登录响应服务层:1根据用户名查询用户是否存在2根据用户名和密码查询用户 退出登录1控制层:1查询是否有用户登录2清空session 动态菜单栏123控制层:1获取session中的用户信息2查询用户权限3查询该权限下的菜单4将菜单进行格式化服务层:1查询菜单 对菜单的处理:1.1获取菜单,添加到数组中1.2根据节点信息 将子节点添加到父节点的child属性(递归),并获取根节点 用户权限管理1todo 图书入库12控制层:1获取session中的用户信息2查询用户权限3图书入库 分类查询 位置查询 编号查询 (查询)1控制层:1获取图书信息2格式数据 借书还书登记还书审核","categories":[{"name":"demo","slug":"demo","permalink":"https://nly-xiaoyu.github.io.git/categories/demo/"}],"tags":[{"name":"library","slug":"library","permalink":"https://nly-xiaoyu.github.io.git/tags/library/"}]},{"title":"github及工具的使用","slug":"github","date":"2021-09-26T08:01:14.165Z","updated":"2021-09-27T04:50:42.628Z","comments":true,"path":"2021/09/26/github/","link":"","permalink":"https://nly-xiaoyu.github.io.git/2021/09/26/github/","excerpt":"","text":"代码仓库的建立1234进入github 建立一个新的repository在项目区选择一个空白的文件夹在文件夹中clone该仓库在文件夹下新建文件夹创建项目 或者 将项目代码转移到该文件夹下() 代码提交","categories":[{"name":"github","slug":"github","permalink":"https://nly-xiaoyu.github.io.git/categories/github/"}],"tags":[{"name":"node","slug":"node","permalink":"https://nly-xiaoyu.github.io.git/tags/node/"},{"name":"tool","slug":"tool","permalink":"https://nly-xiaoyu.github.io.git/tags/tool/"}]},{"title":"hexo学习笔记","slug":"node/hexoNode","date":"2021-07-16T02:44:53.725Z","updated":"2021-11-02T06:54:29.246Z","comments":true,"path":"2021/07/16/node/hexoNode/","link":"","permalink":"https://nly-xiaoyu.github.io.git/2021/07/16/node/hexoNode/","excerpt":"","text":"hexo常用命令12本地启动: hexo s&#x2F;service -p 端口号提交至github : hexo d","categories":[{"name":"hexo","slug":"hexo","permalink":"https://nly-xiaoyu.github.io.git/categories/hexo/"}],"tags":[{"name":"node","slug":"node","permalink":"https://nly-xiaoyu.github.io.git/tags/node/"},{"name":"tool","slug":"tool","permalink":"https://nly-xiaoyu.github.io.git/tags/tool/"}]},{"title":"Spring学习笔记","slug":"node/springStudyNodebook","date":"2021-07-16T02:32:47.201Z","updated":"2021-11-02T06:55:23.307Z","comments":true,"path":"2021/07/16/node/springStudyNodebook/","link":"","permalink":"https://nly-xiaoyu.github.io.git/2021/07/16/node/springStudyNodebook/","excerpt":"","text":"spring简介spring的历史122002年 spring的前身 interface212004年3月24日 Spring框架以interface2框架为基础,经过重新设计,发布了1.0正式版本","categories":[{"name":"srping","slug":"srping","permalink":"https://nly-xiaoyu.github.io.git/categories/srping/"}],"tags":[{"name":"node","slug":"node","permalink":"https://nly-xiaoyu.github.io.git/tags/node/"}]},{"title":"成功的建立博客","slug":"hello-world","date":"2021-03-07T13:58:17.229Z","updated":"2021-11-02T07:49:35.906Z","comments":true,"path":"2021/03/07/hello-world/","link":"","permalink":"https://nly-xiaoyu.github.io.git/2021/03/07/hello-world/","excerpt":"","text":"2021年3月9日，经历两天的时间后，我完成了hexo的博客建立 建立博客的目的记录生活1比起用图片和视频的形式来记录生活，我更喜欢用文字来表达自己当时的状态，无论是心情还是想法。 记录成长1把一个一个的脚印刻印在脚下的路上，把一个一个的机会放在手上 计划和总结1看看还有那些flag没有完成","categories":[{"name":"建站","slug":"建站","permalink":"https://nly-xiaoyu.github.io.git/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"建站","slug":"建站","permalink":"https://nly-xiaoyu.github.io.git/tags/%E5%BB%BA%E7%AB%99/"}]}],"categories":[{"name":"Thread","slug":"Thread","permalink":"https://nly-xiaoyu.github.io.git/categories/Thread/"},{"name":"JVM","slug":"JVM","permalink":"https://nly-xiaoyu.github.io.git/categories/JVM/"},{"name":"Redis","slug":"Redis","permalink":"https://nly-xiaoyu.github.io.git/categories/Redis/"},{"name":"建站","slug":"建站","permalink":"https://nly-xiaoyu.github.io.git/categories/%E5%BB%BA%E7%AB%99/"},{"name":"demo","slug":"demo","permalink":"https://nly-xiaoyu.github.io.git/categories/demo/"},{"name":"github","slug":"github","permalink":"https://nly-xiaoyu.github.io.git/categories/github/"},{"name":"hexo","slug":"hexo","permalink":"https://nly-xiaoyu.github.io.git/categories/hexo/"},{"name":"srping","slug":"srping","permalink":"https://nly-xiaoyu.github.io.git/categories/srping/"}],"tags":[{"name":"node","slug":"node","permalink":"https://nly-xiaoyu.github.io.git/tags/node/"},{"name":"建站","slug":"建站","permalink":"https://nly-xiaoyu.github.io.git/tags/%E5%BB%BA%E7%AB%99/"},{"name":"linux","slug":"linux","permalink":"https://nly-xiaoyu.github.io.git/tags/linux/"},{"name":"library","slug":"library","permalink":"https://nly-xiaoyu.github.io.git/tags/library/"},{"name":"tool","slug":"tool","permalink":"https://nly-xiaoyu.github.io.git/tags/tool/"}]}