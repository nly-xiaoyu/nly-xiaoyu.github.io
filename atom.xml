<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://nly-xiaoyu.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://nly-xiaoyu.github.io.git/"/>
  <updated>2021-11-24T09:06:04.979Z</updated>
  <id>https://nly-xiaoyu.github.io.git/</id>
  
  <author>
    <name>xiaoyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线程学习笔记</title>
    <link href="https://nly-xiaoyu.github.io.git/2021/11/23/node/Thread/"/>
    <id>https://nly-xiaoyu.github.io.git/2021/11/23/node/Thread/</id>
    <published>2021-11-23T07:23:08.704Z</published>
    <updated>2021-11-24T09:06:04.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><h4 id="callable接口"><a href="#callable接口" class="headerlink" title="callable接口"></a>callable接口</h4><p>callable接口拥有返回值,需要抛出异常,需要手动开启服务和关闭服务</p><p>实现:线程体中实现callable接口,重写call方法（与runable中的run方法一致）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建执行服务</span></span><br><span class="line">ExecutorService ser = Exacutor.newFixedThreadPool(<span class="keyword">int</span> nTread);</span><br><span class="line"><span class="comment">//提交执行</span></span><br><span class="line">Future &lt;Object&gt; result = ser.submit;<span class="comment">//和runable的start方法一致,具有其他操作</span></span><br><span class="line"><span class="comment">//获取结果</span></span><br><span class="line">Object result.get();<span class="comment">//需要抛出异常</span></span><br><span class="line"><span class="comment">//关闭服务</span></span><br><span class="line">ser.shutdown();</span><br></pre></td></tr></table></figure><h4 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h4><p>简化代码程序，属于函数式编程。</p><ul><li>避免匿名内部类定义过多</li><li>可以让代码看起来更加简洁</li><li>去掉了一堆没有意义的代码，保留核心逻辑</li></ul><h5 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h5><p>如果一个接口只包含唯一的抽象一个方法，那么它就是函数式接口。</p><h5 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h5><ul><li>setPriority（更改线程的优先级）</li><li>static void sleep（在指定毫秒数内让当前正在执行的线程休眠）</li><li>void join（等待线程中止）</li><li>static void yield（站厅正在执行的线程，并执行其他线程）</li><li>void interrupt（中断线程，建议不适用）</li><li>boolean isAlive（测试线程是否出于活动状态）</li></ul><h5 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h5><p>不推荐使用JDK提供的stop()，destroy()方法，推荐使用一个标志位flag，当flag=false时，程序自己停止。</p><h5 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h5><p>sleep（）指定当前线程阻塞时间的毫秒数。</p><p>sleep能模拟网络延时，放大高网络延时的问题发生性。</p><p>sleep不会释放线程锁。</p><h5 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h5><p>yeild 让当前正在执行的线程暂停，但不阻塞，由运行态转化成阻塞态，礼让不一定成功。</p><h5 id="线程强制执行"><a href="#线程强制执行" class="headerlink" title="线程强制执行"></a>线程强制执行</h5><p>join 待该线程执行完后，其他线程才能执行，否则进入阻塞态。</p><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;线程&quot;&gt;&lt;a href=&quot;#线程&quot; class=&quot;headerlink&quot; title=&quot;线程&quot;&gt;&lt;/a&gt;线程&lt;/h1&gt;&lt;h4 id=&quot;callable接口&quot;&gt;&lt;a href=&quot;#callable接口&quot; class=&quot;headerlink&quot; title=&quot;calla</summary>
      
    
    
    
    <category term="Thread" scheme="https://nly-xiaoyu.github.io.git/categories/Thread/"/>
    
    
    <category term="node" scheme="https://nly-xiaoyu.github.io.git/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>JVM学习笔记</title>
    <link href="https://nly-xiaoyu.github.io.git/2021/11/02/node/JVMnode/"/>
    <id>https://nly-xiaoyu.github.io.git/2021/11/02/node/JVMnode/</id>
    <published>2021-11-02T08:11:34.000Z</published>
    <updated>2021-11-03T10:00:58.013Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="JVM-基本概念"><a href="#JVM-基本概念" class="headerlink" title="JVM 基本概念"></a>JVM 基本概念</h1><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>JVM是可运行Java代码的假想计算机，包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收，堆和一个存储方法域。JVM是运行在操作系统之上的，它与硬件没有直接的交互。</p><h3 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Java源文件通过编译器编译，产生相应的字节码文件(.Class文件)，然后字节码文件通通Java虚拟机的解释器，翻译成待定机器上的字节码。</span><br><span class="line">如下</span><br><span class="line">·Java源文件→编译器→字节码文件</span><br><span class="line">·字节码文件→JVM→机器码</span><br></pre></td></tr></table></figure><h3 id="为什么能跨平台"><a href="#为什么能跨平台" class="headerlink" title="为什么能跨平台"></a>为什么能跨平台</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">每一种跨平台的的解释器是不同的 但是实现的虚拟机是相同的，这也是Java能实现跨平台的原因。</span><br><span class="line">当一个程序开始运行,这是虚拟机开始实例化了，多个程序启动就会存在多个虚拟机实例。当程序退出或者关闭,虚拟机实例消亡多个虚拟机实例之间的数据不会共享。</span><br></pre></td></tr></table></figure><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这里的线程指的是程序执行的一个实体。</span><br><span class="line">JVM允许一个应用并发执行多个线程。</span><br></pre></td></tr></table></figure><h3 id="JVM内存区域"><a href="#JVM内存区域" class="headerlink" title="JVM内存区域"></a>JVM内存区域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JVM内存主要分为线程私有区域【程序计数器，虚拟机栈，本地方法区】、线程共享区域【JAVA堆、方法区】、直接内存。</span><br></pre></td></tr></table></figure><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当前线程所执行的字节码的行号提示器，每个线程都有一个独立的线程的计数器。</span><br><span class="line">  在执行java方法时，计数器记录的时虚拟机字节码指令的地址（当前指令的地址）。</span><br></pre></td></tr></table></figure><h4 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">虚拟机额栈是用来描述java方法执行的内存模型，每个方法在执行的时候会创建一个栈帧用来存储局部变量、操作数栈、动态链接、方法出口等信息。</span><br><span class="line">每个方法从调用到执行完成，对应一个栈帧在虚拟机中入栈到出栈。</span><br></pre></td></tr></table></figure><h4 id="堆-运行时数据区"><a href="#堆-运行时数据区" class="headerlink" title="堆-运行时数据区"></a>堆-运行时数据区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">被线程共享的内存区域，创建的对象和数组都保存在java堆中，也是GC（垃圾回收器）进行垃圾回收的最重要的内存区域。</span><br></pre></td></tr></table></figure><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用于存储被JVM加载的类信息、常量、静</span><br><span class="line">态变量、即时编译器编译后的代码等数据。</span><br><span class="line">运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池。</span><br></pre></td></tr></table></figure><h3 id="JVM运行时内存"><a href="#JVM运行时内存" class="headerlink" title="JVM运行时内存"></a>JVM运行时内存</h3><p>Java 堆从 GC 的角度还可以细分为: 新生代(Eden区、From Survivor区和To Survivor区)和老年代。</p><h4 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">是用来存放新生的对象.一般占据堆的 1&#x2F;3 空间。由于频繁创建对象，所以新生代会频繁触发MinorGC进行垃圾回收。新生代又分为Eden区、ServivorFrom、ServivorTo三个区。</span><br><span class="line">Eden区</span><br><span class="line">Java新对象的出生地如果新创建的对象占用内存很大，则直接分配到老年代）。当 Eden区内存不够的时候就会触MinorGC，对新生代区进行一次垃圾回收。</span><br><span class="line">ServivorFrom</span><br><span class="line">上一次GC的幸存者作为这一次GC的被扫描者。</span><br><span class="line">3)ServivorTo</span><br><span class="line">保留了一次MinorGC过程中的幸存者。</span><br><span class="line">4)MinorGC的过程</span><br><span class="line">首先，把Eden和ServivorFrom区域中存活的对象复制到ServicorTo区域（如果有对象的年龄以及达到了老年的标准，则赋值到老年代区），同时把这些对象的年龄+1（如果ServicorTo不够位置了就放到老年区),然后，清空Eden和ServicorFrom 中的对象,最后，ServicorTo和SrvicorFrom互换，原ServicorTo成为下一次GC时 ServicorFrom区。</span><br></pre></td></tr></table></figure><h4 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">主要存放应用程序中生命周期长的内存对象。老年代的对象比较稳定，所以 MajorGC不会频繁执行。</span><br><span class="line">MajorGC采用标记清除算法:首先扫描一次所有老年代，标记出存活的对象，然后回收没有标记的对象。</span><br></pre></td></tr></table></figure><h4 id="永久代"><a href="#永久代" class="headerlink" title="永久代"></a>永久代</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">指内存的永久保存区域，主要存放Class和Meta（元数据）的信息,Class 在被加载的时候被放入永久区域，它和和存放实例的区域不同,GC不会在主程序运行期对永久区域进行清理。所以这也导致了永久代的区域会随着加载的 Class 的增多而胀满，最终抛出OOM(OutOfMemory)异常。</span><br><span class="line">在 Java8 中，永久代已经被移除。被一个称为“元数据区”（元空间）的区域所取代。</span><br></pre></td></tr></table></figure><h3 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h3><h4 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h4><p>分代收集法是目前大部分 JVM 所采用的方法，其核心思想是根据对象存活的不同生命周期将内存划分为不同的域，将G 堆划分为老生代和新生代。老生代的特点是每次垃圾回收时只有少量对象需要被回收，新生代的特点是每次垃圾回收时都有大量垃圾需要被回收，根据不同区域选择不同的算法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新生代与复制算法</span><br><span class="line">新生代中每次垃圾回收都要回收大部分对象，要复制的操作比较少，但通常并不是按照 1：1 来划分新生代。一般将新生代划分为一块较大的Eden空间和两个较小的Survivor空间(From Space, To Space)，每次使用Eden空间和其中的一块Survivor空间，当进行回收时，将该两块空间中还存活的对象复制到另 一块Survivor空间中。</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">老年代与标记复制算法</span><br><span class="line">1. JAVA 虚拟机提到过的处于方法区的永生代(Permanet Generation)，它用来存储 class 类，</span><br><span class="line">常量，方法描述等。对永生代的回收主要包括废弃常量和无用的类。</span><br><span class="line">2. 对象的内存分配主要在新生代的 Eden Space 和 Survivor Space 的 From Space(Survivor 目</span><br><span class="line">前存放对象的那一块)，少数情况会直接分配到老生代。</span><br><span class="line">3. 当新生代的 Eden Space 和 From Space 空间不足时就会发生一次 GC，进行 GC 后，Eden</span><br><span class="line">Space 和 From Space 区的存活对象会被挪到 To Space，然后将 Eden Space 和 From</span><br><span class="line">Space 进行清理。</span><br><span class="line">4. 如果 To Space 无法足够存储某个对象，则将这个对象存储到老生代。</span><br><span class="line">5. 在进行 GC 后，使用的便是 Eden Space 和 To Space 了，如此反复循环。</span><br><span class="line">6. 当对象在 Survivor 区躲过一次 GC 后，其年龄就会+1。默认情况下年龄到达 15 的对象会被</span><br><span class="line">移到老生代中。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;JVM-基本概念&quot;&gt;&lt;a href=&quot;#JVM-基本概念&quot; class=&quot;headerlink&quot; title=&quot;JVM 基本概念&quot;&gt;&lt;/a&gt;JVM 基本概念&lt;/h1&gt;&lt;h2 id=&quot;JVM&quot;&gt;&lt;a href=&quot;#JVM&quot; class=&quot;h</summary>
      
    
    
    
    <category term="JVM" scheme="https://nly-xiaoyu.github.io.git/categories/JVM/"/>
    
    
    <category term="node" scheme="https://nly-xiaoyu.github.io.git/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="https://nly-xiaoyu.github.io.git/2021/10/28/node/Redislearn/"/>
    <id>https://nly-xiaoyu.github.io.git/2021/10/28/node/Redislearn/</id>
    <published>2021-10-28T03:16:44.914Z</published>
    <updated>2021-11-02T07:49:32.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NoSql数据库简介"><a href="#NoSql数据库简介" class="headerlink" title="NoSql数据库简介"></a>NoSql数据库简介</h2><h3 id="技术分类"><a href="#技术分类" class="headerlink" title="技术分类"></a>技术分类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 解决功能性问题:Java,Jsp,Tomcat,HTML,JDBC</span><br><span class="line">2 解决扩展问题:Struts,Spring,SpingMVC,Mybatis</span><br><span class="line">3 解决性能问题 : NoSql,Java线程,Hadoop</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;NoSql数据库简介&quot;&gt;&lt;a href=&quot;#NoSql数据库简介&quot; class=&quot;headerlink&quot; title=&quot;NoSql数据库简介&quot;&gt;&lt;/a&gt;NoSql数据库简介&lt;/h2&gt;&lt;h3 id=&quot;技术分类&quot;&gt;&lt;a href=&quot;#技术分类&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Redis" scheme="https://nly-xiaoyu.github.io.git/categories/Redis/"/>
    
    
    <category term="node" scheme="https://nly-xiaoyu.github.io.git/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>library项目部署</title>
    <link href="https://nly-xiaoyu.github.io.git/2021/10/24/libraryProject/librarywebsite/"/>
    <id>https://nly-xiaoyu.github.io.git/2021/10/24/libraryProject/librarywebsite/</id>
    <published>2021-10-24T10:11:31.445Z</published>
    <updated>2021-11-02T06:55:16.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务器初始化"><a href="#服务器初始化" class="headerlink" title="服务器初始化"></a>服务器初始化</h2><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">下载官方 Mysql 包</span><br><span class="line">wget -i -c http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">解压安装</span><br><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">安装mysql</span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line">启动mysql</span><br><span class="line">systemctl start  mysqld.service</span><br><span class="line">查看mysql状态</span><br><span class="line">service mysqld status</span><br><span class="line">查看初始密码</span><br><span class="line">grep &#39;password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log</span><br><span class="line">进入mysql</span><br><span class="line">mysql -u root -p</span><br><span class="line">修改密码</span><br><span class="line">ALTER USER USER() IDENTIFIED BY &#39;XXXX&#39;;</span><br></pre></td></tr></table></figure><h3 id="mysql远程授权"><a href="#mysql远程授权" class="headerlink" title="mysql远程授权"></a>mysql远程授权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line"></span><br><span class="line">mysql&gt; update user set host&#x3D;&quot;%&quot; where user&#x3D;&quot;root&quot;;</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line">开放3306端口</span><br></pre></td></tr></table></figure><h3 id="打jar包上传"><a href="#打jar包上传" class="headerlink" title="打jar包上传"></a>打jar包上传</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn clean</span><br><span class="line">mvn package</span><br></pre></td></tr></table></figure><h3 id="在linux上运行-library-start-sh文件"><a href="#在linux上运行-library-start-sh文件" class="headerlink" title="在linux上运行 library-start.sh文件"></a>在linux上运行 library-start.sh文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">CUR_SHELL_DIR&#x3D;&#96;pwd&#96;</span><br><span class="line">CUR_SHELL_NAME&#x3D;&#96;basename $&#123;BASH_SOURCE&#125;&#96;</span><br><span class="line">#修改这里jar包名即可</span><br><span class="line">JAR_NAME&#x3D;&quot;library-1.0-SNAPSHOT.jar&quot;</span><br><span class="line">JAR_PATH&#x3D;$CUR_SHELL_DIR&#x2F;$JAR_NAME</span><br><span class="line">#JAVA_MEM_OPTS&#x3D;&quot; -server -Xms1024m -Xmx1024m -XX:PermSize&#x3D;128m&quot;</span><br><span class="line">JAVA_MEM_OPTS&#x3D;&quot;&quot;</span><br><span class="line">#SPRING_PROFILES_ACTIV&#x3D;&quot;-Dspring.profiles.active&#x3D;eureka2&quot;</span><br><span class="line">SPRING_PROFILES_ACTIV&#x3D;&quot;&quot;</span><br><span class="line">LOG_DIR&#x3D;$CUR_SHELL_DIR&#x2F;logs</span><br><span class="line">LOG_PATH&#x3D;$LOG_DIR&#x2F;$&#123;JAR_NAME&#125;.log</span><br><span class="line">echo_help()</span><br><span class="line">&#123;</span><br><span class="line">    echo -e &quot;syntax: sh $CUR_SHELL_NAME start|stop&quot;</span><br><span class="line">&#125;</span><br><span class="line">if [ -z $1 ];then</span><br><span class="line">    echo_help</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line">if [ ! -d &quot;$LOG_DIR&quot; ];then</span><br><span class="line">    mkdir &quot;$LOG_DIR&quot;</span><br><span class="line">fi</span><br><span class="line">if [ ! -f &quot;$LOG_PATH&quot; ];then</span><br><span class="line">    touch &quot;$LOG_DIR&quot;</span><br><span class="line">fi</span><br><span class="line">if [ &quot;$1&quot; &#x3D;&#x3D; &quot;start&quot; ];then</span><br><span class="line"># check server</span><br><span class="line">    PIDS&#x3D;&#96;ps --no-heading -C java -f --width 1000 | grep $JAR_NAME | awk &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">    if [ -n &quot;$PIDS&quot; ]; then</span><br><span class="line">        echo -e &quot;ERROR: The $JAR_NAME already started and the PID is $&#123;PIDS&#125;.&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">echo &quot;Starting the $JAR_NAME...&quot;</span><br><span class="line"></span><br><span class="line">    # start</span><br><span class="line">    nohup java $JAVA_MEM_OPTS -jar $SPRING_PROFILES_ACTIV $JAR_PATH &gt;&gt; $LOG_PATH 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">    COUNT&#x3D;0</span><br><span class="line">    while [ $COUNT -lt 1 ]; do</span><br><span class="line">        sleep 1</span><br><span class="line">        COUNT&#x3D;&#96;ps  --no-heading -C java -f --width 1000 | grep &quot;$JAR_NAME&quot; | awk &#39;&#123;print $2&#125;&#39; | wc -l&#96;</span><br><span class="line">        if [ $COUNT -gt 0 ]; then</span><br><span class="line">            break</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">    PIDS&#x3D;&#96;ps  --no-heading -C java -f --width 1000 | grep &quot;$JAR_NAME&quot; | awk &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">    echo &quot;$&#123;JAR_NAME&#125; Started and the PID is $&#123;PIDS&#125;.&quot;</span><br><span class="line">    echo &quot;You can check the log file in $&#123;LOG_PATH&#125; for details.&quot;</span><br><span class="line"></span><br><span class="line">elif [ &quot;$1&quot; &#x3D;&#x3D; &quot;stop&quot; ];then</span><br><span class="line"></span><br><span class="line">    PIDS&#x3D;&#96;ps --no-heading -C java -f --width 1000 | grep $JAR_NAME | awk &#39;&#123;print $2&#125;&#39;&#96;</span><br><span class="line">    if [ -z &quot;$PIDS&quot; ]; then</span><br><span class="line">        echo &quot;ERROR:The $JAR_NAME does not started!&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line">echo -e &quot;Stopping the $JAR_NAME...&quot;</span><br><span class="line"></span><br><span class="line">    for PID in $PIDS; do</span><br><span class="line">        kill $PID &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    COUNT&#x3D;0</span><br><span class="line">    while [ $COUNT -lt 1 ]; do</span><br><span class="line">        sleep 1</span><br><span class="line">        COUNT&#x3D;1</span><br><span class="line">        for PID in $PIDS ; do</span><br><span class="line">            PID_EXIST&#x3D;&#96;ps --no-heading -p $PID&#96;</span><br><span class="line">            if [ -n &quot;$PID_EXIST&quot; ]; then</span><br><span class="line">                COUNT&#x3D;0</span><br><span class="line">                break</span><br><span class="line">            fi</span><br><span class="line">        done</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    echo -e &quot;$&#123;JAR_NAME&#125; Stopped and the PID is $&#123;PIDS&#125;.&quot;</span><br><span class="line">else</span><br><span class="line">    echo_help</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 library-start.sh</span><br><span class="line">library-start.sh start</span><br><span class="line">开放服务器8888端口</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;服务器初始化&quot;&gt;&lt;a href=&quot;#服务器初始化&quot; class=&quot;headerlink&quot; title=&quot;服务器初始化&quot;&gt;&lt;/a&gt;服务器初始化&lt;/h2&gt;&lt;h3 id=&quot;安装mysql&quot;&gt;&lt;a href=&quot;#安装mysql&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="建站" scheme="https://nly-xiaoyu.github.io.git/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="建站" scheme="https://nly-xiaoyu.github.io.git/tags/%E5%BB%BA%E7%AB%99/"/>
    
    <category term="linux" scheme="https://nly-xiaoyu.github.io.git/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>library设计</title>
    <link href="https://nly-xiaoyu.github.io.git/2021/09/27/libraryProject/librarydesign/"/>
    <id>https://nly-xiaoyu.github.io.git/2021/09/27/libraryProject/librarydesign/</id>
    <published>2021-09-27T06:09:25.533Z</published>
    <updated>2021-11-02T06:55:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表单设计"><a href="#表单设计" class="headerlink" title="表单设计"></a>表单设计</h2><h3 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用于用户登录以及权限分配</span><br><span class="line">用户编号 id 自增长</span><br><span class="line">用户名 username 唯一 不为空</span><br><span class="line">用户密码 password 不为空</span><br><span class="line">学号 唯一 默认空</span><br><span class="line">电话 不为空</span><br><span class="line">权限编号 唯一 不为空 </span><br></pre></td></tr></table></figure><h3 id="权限表-permit"><a href="#权限表-permit" class="headerlink" title="权限表 permit"></a>权限表 permit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">权限编号 id自增长</span><br><span class="line">权限名称 prename</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="菜单表-menu"><a href="#菜单表-menu" class="headerlink" title="菜单表 menu"></a>菜单表 menu</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">菜单编号 id</span><br><span class="line">菜单名称 mname</span><br><span class="line">父节点编号 mid</span><br><span class="line">修改:(为了适应前端获取数据的格式,对数据库进行修改)</span><br><span class="line">菜单编号 id</span><br><span class="line">父节点编号 pid</span><br><span class="line">菜单名称 title</span><br><span class="line">图标位置 icon</span><br><span class="line">网页位置 href</span><br><span class="line">跳转模式 _target</span><br><span class="line">是否默认展子菜单 spread</span><br><span class="line">权限标识 permission</span><br><span class="line">类型 type</span><br><span class="line">状态 status</span><br><span class="line">排序值 satus</span><br><span class="line">假删除 ifdelete</span><br></pre></td></tr></table></figure><h3 id="权限-菜单"><a href="#权限-菜单" class="headerlink" title="权限-菜单"></a>权限-菜单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">权限编号 pid</span><br><span class="line">菜单编号 mid</span><br></pre></td></tr></table></figure><h3 id="书"><a href="#书" class="headerlink" title="书"></a>书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">书编号 id</span><br><span class="line">书名 bname</span><br><span class="line">书名编号 bno</span><br><span class="line">作者名 author</span><br><span class="line">价格 price</span><br><span class="line">位置编号 locnum</span><br><span class="line">位置区域 locarea</span><br><span class="line">评论 ramark</span><br></pre></td></tr></table></figure><h3 id="借书-appointment"><a href="#借书-appointment" class="headerlink" title="借书 appointment"></a>借书 appointment</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">编号 id</span><br><span class="line">用户编号 uid</span><br><span class="line">书编号 bid</span><br><span class="line">借书时间 borrow</span><br><span class="line">还书时间 return</span><br><span class="line">书本状态 status</span><br></pre></td></tr></table></figure><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">发送者 formid</span><br><span class="line">接受者 toid</span><br><span class="line">消息 message</span><br><span class="line">时间 time</span><br><span class="line">状态 status</span><br></pre></td></tr></table></figure><h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表现层:验证用户填写信息是否合法</span><br><span class="line">控制层:1查询用户时候存在 2对密码进行明文加密(util工具) 3注册用户 </span><br><span class="line">服务层:1根据用户名查询用户是否存在2根据user对象插入数据库</span><br></pre></td></tr></table></figure><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表现层:验证用户填写信息是否合法</span><br><span class="line">控制层:1查询用户时候存在 2对密码进行明文加密(util工具) 3查询用户密码是否正确 4将该用户绑定到session中 5返回登录响应</span><br><span class="line">服务层:1根据用户名查询用户是否存在2根据用户名和密码查询用户</span><br></pre></td></tr></table></figure><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">控制层:1查询是否有用户登录2清空session</span><br></pre></td></tr></table></figure><h3 id="动态菜单栏"><a href="#动态菜单栏" class="headerlink" title="动态菜单栏"></a>动态菜单栏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">控制层:1获取session中的用户信息2查询用户权限3查询该权限下的菜单4将菜单进行格式化</span><br><span class="line">服务层:1查询菜单</span><br><span class="line">        对菜单的处理:1.1获取菜单,添加到数组中1.2根据节点信息 将子节点添加到父节点的child属性(递归),并获取根节点</span><br></pre></td></tr></table></figure><h3 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todo</span><br></pre></td></tr></table></figure><h3 id="图书入库"><a href="#图书入库" class="headerlink" title="图书入库"></a>图书入库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">控制层:1获取session中的用户信息2查询用户权限3图书入库</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分类查询-位置查询-编号查询-查询"><a href="#分类查询-位置查询-编号查询-查询" class="headerlink" title="分类查询 位置查询 编号查询 (查询)"></a>分类查询 位置查询 编号查询 (查询)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">控制层:1获取图书信息2格式数据</span><br></pre></td></tr></table></figure><h3 id="借书"><a href="#借书" class="headerlink" title="借书"></a>借书</h3><h3 id="还书登记"><a href="#还书登记" class="headerlink" title="还书登记"></a>还书登记</h3><h3 id="还书审核"><a href="#还书审核" class="headerlink" title="还书审核"></a>还书审核</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;表单设计&quot;&gt;&lt;a href=&quot;#表单设计&quot; class=&quot;headerlink&quot; title=&quot;表单设计&quot;&gt;&lt;/a&gt;表单设计&lt;/h2&gt;&lt;h3 id=&quot;用户表&quot;&gt;&lt;a href=&quot;#用户表&quot; class=&quot;headerlink&quot; title=&quot;用户表&quot;&gt;&lt;/a&gt;用户</summary>
      
    
    
    
    <category term="demo" scheme="https://nly-xiaoyu.github.io.git/categories/demo/"/>
    
    
    <category term="library" scheme="https://nly-xiaoyu.github.io.git/tags/library/"/>
    
  </entry>
  
  <entry>
    <title>github及工具的使用</title>
    <link href="https://nly-xiaoyu.github.io.git/2021/09/26/github/"/>
    <id>https://nly-xiaoyu.github.io.git/2021/09/26/github/</id>
    <published>2021-09-26T08:01:14.165Z</published>
    <updated>2021-09-27T04:50:42.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码仓库的建立"><a href="#代码仓库的建立" class="headerlink" title="代码仓库的建立"></a>代码仓库的建立</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">进入github 建立一个新的repository</span><br><span class="line">在项目区选择一个空白的文件夹</span><br><span class="line">在文件夹中clone该仓库</span><br><span class="line">在文件夹下新建文件夹创建项目 或者 将项目代码转移到该文件夹下()</span><br></pre></td></tr></table></figure><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;代码仓库的建立&quot;&gt;&lt;a href=&quot;#代码仓库的建立&quot; class=&quot;headerlink&quot; title=&quot;代码仓库的建立&quot;&gt;&lt;/a&gt;代码仓库的建立&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="github" scheme="https://nly-xiaoyu.github.io.git/categories/github/"/>
    
    
    <category term="node" scheme="https://nly-xiaoyu.github.io.git/tags/node/"/>
    
    <category term="tool" scheme="https://nly-xiaoyu.github.io.git/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>hexo学习笔记</title>
    <link href="https://nly-xiaoyu.github.io.git/2021/07/16/node/hexoNode/"/>
    <id>https://nly-xiaoyu.github.io.git/2021/07/16/node/hexoNode/</id>
    <published>2021-07-16T02:44:53.725Z</published>
    <updated>2021-11-02T06:54:29.246Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">本地启动: hexo s&#x2F;service -p 端口号</span><br><span class="line">提交至github : hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;hexo常用命令&quot;&gt;&lt;a href=&quot;#hexo常用命令&quot; class=&quot;headerlink&quot; title=&quot;hexo常用命令&quot;&gt;&lt;/a&gt;hexo常用命令&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="hexo" scheme="https://nly-xiaoyu.github.io.git/categories/hexo/"/>
    
    
    <category term="node" scheme="https://nly-xiaoyu.github.io.git/tags/node/"/>
    
    <category term="tool" scheme="https://nly-xiaoyu.github.io.git/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记</title>
    <link href="https://nly-xiaoyu.github.io.git/2021/07/16/node/springStudyNodebook/"/>
    <id>https://nly-xiaoyu.github.io.git/2021/07/16/node/springStudyNodebook/</id>
    <published>2021-07-16T02:32:47.201Z</published>
    <updated>2021-11-02T06:55:23.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring简介"><a href="#spring简介" class="headerlink" title="spring简介"></a>spring简介</h2><h3 id="spring的历史"><a href="#spring的历史" class="headerlink" title="spring的历史"></a>spring的历史</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2002年 spring的前身 interface21</span><br><span class="line">2004年3月24日 Spring框架以interface2框架为基础,经过重新设计,发布了1.0正式版本</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;spring简介&quot;&gt;&lt;a href=&quot;#spring简介&quot; class=&quot;headerlink&quot; title=&quot;spring简介&quot;&gt;&lt;/a&gt;spring简介&lt;/h2&gt;&lt;h3 id=&quot;spring的历史&quot;&gt;&lt;a href=&quot;#spring的历史&quot; class=&quot;he</summary>
      
    
    
    
    <category term="srping" scheme="https://nly-xiaoyu.github.io.git/categories/srping/"/>
    
    
    <category term="node" scheme="https://nly-xiaoyu.github.io.git/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>成功的建立博客</title>
    <link href="https://nly-xiaoyu.github.io.git/2021/03/07/hello-world/"/>
    <id>https://nly-xiaoyu.github.io.git/2021/03/07/hello-world/</id>
    <published>2021-03-07T13:58:17.229Z</published>
    <updated>2021-11-02T07:49:35.906Z</updated>
    
    <content type="html"><![CDATA[<p>2021年3月9日，经历两天的时间后，我完成了hexo的博客建立</p><h2 id="建立博客的目的"><a href="#建立博客的目的" class="headerlink" title="建立博客的目的"></a>建立博客的目的</h2><h3 id="记录生活"><a href="#记录生活" class="headerlink" title="记录生活"></a>记录生活</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比起用图片和视频的形式来记录生活，我更喜欢用文字来表达自己当时的状态，无论是心情还是想法。</span><br></pre></td></tr></table></figure><h3 id="记录成长"><a href="#记录成长" class="headerlink" title="记录成长"></a>记录成长</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把一个一个的脚印刻印在脚下的路上，把一个一个的机会放在手上</span><br></pre></td></tr></table></figure><h3 id="计划和总结"><a href="#计划和总结" class="headerlink" title="计划和总结"></a>计划和总结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">看看还有那些flag没有完成</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2021年3月9日，经历两天的时间后，我完成了hexo的博客建立&lt;/p&gt;
&lt;h2 id=&quot;建立博客的目的&quot;&gt;&lt;a href=&quot;#建立博客的目的&quot; class=&quot;headerlink&quot; title=&quot;建立博客的目的&quot;&gt;&lt;/a&gt;建立博客的目的&lt;/h2&gt;&lt;h3 id=&quot;记录生活&quot;</summary>
      
    
    
    
    <category term="建站" scheme="https://nly-xiaoyu.github.io.git/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
    <category term="建站" scheme="https://nly-xiaoyu.github.io.git/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
</feed>
